{"version":3,"sources":["components/Pages/Views/Videos/Bacteria.mp4","components/Patients/Patients.js","components/Pages/Home/Home.js","components/Patients/PatientDetails.js","components/Patients/AddPatients.js","components/Patients/EditPatient.js","components/Conditions/ConditionItem.js","components/Drugs/DrugItem.js","components/Drugs/AddPatientDrug.js","components/Pages/Main.js","components/Navbar/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Patients","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","patients","getPatients","_this2","axios","get","then","response","setState","data","catch","err","console","log","react_default","a","createElement","id","style","fontFamily","className","react_router_dom","to","map","patient","i","key","concat","pt_name","pt_dob","pt_cell","Component","Home","autoPlay","loop","muted","src","Bacteria","type","textAlign","color","fontWeight","fontSize","PatientDetails","props","details","getPatient","match","params","_this3","delete","history","push","pt_gender","pt_email","onClick","onDelete","bind","name","AddPatient","newPatient","request","method","url","e","refs","value","addPatient","preventDefault","onSubmit","ref","placeholder","htmlFor","EditPatient","handleInputChange","assertThisInitialized","getPatientDetails","editPatient","target","defineProperty","onChange","ConditionItem","conditions","getPatientConditions","condition","icd_10","condition_name","DrugItem","drugs","getPatientDrugs","drug","drug_name","AddPatientDrug","newPatientDrug","patientId","addPatientDrug","Main","react_router","exact","path","component","Navbar","href","data-target","App","components_Navbar_Navbar","Pages_Main","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2140c0ea.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Bacteria.14f52411.mp4\";","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\n\nclass Patients extends Component {\n    constructor() {\n        super();\n        // Create a state object\n        this.state = {\n            // Set patients to an empty array. You will have to use the same method when you are pulling in drugs, conditions and providers as well.\n            patients: []\n        }\n    }\n\n    // Create a componentWillMount lifecycle method\n    componentWillMount() {\n        // This will go to the backend and retrieve the info from LB API\n        this.getPatients();\n    }\n\n    // Create a new method getPatients to make an axios request\n    getPatients() {\n        axios.get('http://localhost:3000/api/patients')\n            .then(response => {\n                // Setting the patients state object to the response\n                this.setState({ patients: response.data }, () => {})\n            })\n            .catch(err => console.log(err))\n    }\n\n    // Render is a lifecyle method\n    render() {\n        return (\n            <div id=\"patientsBody\">\n                <div>\n\n\n                    <div>\n                        <h1 style={{ fontFamily: \"Arial, Helvetica, sans-serif\" }}>Patients</h1>\n                        <div className=\"fixed-action-button\">\n                            <Link to=\"/patients/add\" className=\"btn-floating btn-large red\">\n                                <i className=\"fa fa-plus\"></i>\n                            </Link>\n                            <br />\n                            <br />\n                        </div>\n                        <table className=\"highlight\">\n                            <thead>\n                                <tr>\n                                    <th>Name</th>\n                                    <th>Date of Birth</th>\n                                    <th>Cell Number</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {this.state.patients.map((patient, i) => {\n                                    return (\n                                        <tr key={i}>\n                                            <td>\n                                                <Link to={`/patients/${patient.id}`}>\n                                                    {patient.pt_name}</Link>\n                                            </td>\n                                            <td>{patient.pt_dob}</td>\n                                            <td>{patient.pt_cell}</td>\n                                        </tr>\n                                    )\n                                })}\n                            </tbody>\n                        </table>\n\n                    </div>\n                </div >\n\n            </div >\n        )\n    }\n}\n\nexport default Patients;\n","import React from 'react';\nimport './Home.css';\nimport Bacteria from '../Views/Videos/Bacteria.mp4';\n// import DNA from '../Views/Videos/DNA.mov';\n// import Hd from '../Views/Videos/Hd.mov';\n// import Komp from '../Views/Videos/Komp.mp4';\n// import Magen from '../Views/Videos/Magen.mp4';\n// import Sonp from '../Views/Videos/Sonp.mp4';\n\n\nconst Home = () => (\n  <div>\n    <header className=\"v-header container\">\n      <div className=\"fullscreen-video-wrap\">\n        <video id='videoTag' autoPlay loop muted>\n          <source src={Bacteria} type='video/mp4' />\n\n        </video>\n\n      </div>\n    </header>\n    <div className=\"homePage\">\n      <h1 style={{ textAlign: \"center\", fontFamily: 'fantasy', color: 'blue', fontWeight: 'bold', fontSize: '38px' }}>Welcome to electroScribe</h1>\n      <h4 style={{ textAlign: \"center\" }}>The Electronic Medical Record management app of the future!</h4>\n    </div>\n\n\n  </div>\n)\n\nexport default Home;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\n\nclass PatientDetails extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            details: ''\n        }\n    }\n\n    componentWillMount(){\n        this.getPatient();\n    }\n\n    // Create a new method getPatient to make an axios request to retrieve details of just ONE patient by id\n    getPatient() {\n        let id = this.props.match.params.id;\n        axios.get(`http://localhost:3000/api/patients/${id}`)\n            .then(response => {\n                // Setting the patients state object to the response\n                this.setState({details: response.data}, () => {\n                })\n            })\n            .catch(err => console.log(err))\n    }\n\n    // Creating a new onDelete method to execute when button in Ln 52 is clicked\n    onDelete(){\n        let id = this.state.details.id;\n        axios.delete(`http://localhost:3000/api/patients/${id}`)\n            .then(response => {\n                this.props.history.push('/patients')\n            }).catch(err => console.log(err))\n    }\n\n    render(){\n        return(\n            <div>\n                <div>\n                    <br />\n                    <Link className=\"btn grey\" to=\"/patients\">Back</Link>\n                    <br />\n                    <h1>Details for {this.state.details.pt_name}</h1>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col s12 m6\">\n                    <div className=\"card blue-grey darken-1\">\n                        <div className=\"card-content white-text\">\n                        <p>Gender: {this.state.details.pt_gender}</p>\n                        <p>Date of Birth: {this.state.details.pt_dob}</p>\n                        <p>Email: {this.state.details.pt_email}</p>\n                        <p>Cell: {this.state.details.pt_cell}</p>\n                        </div>\n                        <div className=\"card-action\">\n                        <Link to={`/patients/${this.state.details.id}/conditions`}>Conditions</Link>\n                        <Link to={`/patients/${this.state.details.id}/drugs`}>Drugs</Link>\n                        {/*Ln 52: Adding an onClick prop to the button tag so we can bind the click to the click handler above*/}\n                        <button onClick={this.onDelete.bind(this)} className=\"btn waves-effect waves-light red\" type=\"delete\" name=\"action\">Delete\n                        </button>\n                        </div>\n                    </div>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col s12 m6\">\n                        <button className=\"btn waves-effect waves-light\">\n                            <Link to={`/patients/${this.state.details.id}/drugs/add`}>Add Drug</Link>\n                        </button>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col s12 m6\">\n                        <button className=\"btn waves-effect waves-light\">\n                            <Link to={`/patients/${this.state.details.id}/conditions/add`}>Add Condition</Link>\n                        </button>                        \n                    </div> \n                </div>                \n            </div>\n        )\n    }\n}\n\nexport default PatientDetails;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport './Patients.css';\nclass AddPatient extends Component {\n    // Creating an addPatient method to take in the newPatient object w/ the form data\n    addPatient(newPatient) {\n        //console.log(newPatient)\n        // Making a POST request thru axios\n        axios.request({\n            method: 'POST',\n            url: 'http://localhost:3000/api/patients',\n            data: newPatient\n        }).then(response => {\n            // Redirecting to patients page\n            this.props.history.push('/patients');\n        }).catch(err => console.log(err));\n    };\n\n    // Creating an onSubmit method that takes in \"e\" or event which is the input from the form and stores it in newPatient object. \n    onSubmit(e) {\n        //console.log(this.refs.name.value);\n        // Making sure to create an array of object [{}] since this is the format the API accepts POST requests\n        const newPatient = [{\n            pt_name: this.refs.pt_name.value,\n            pt_email: this.refs.pt_email.value,\n            pt_cell: this.refs.pt_cell.value,\n            pt_gender: this.refs.pt_gender.value,\n            pt_dob: this.refs.pt_dob.value\n        }]\n        // Adds the newPatient object using the addPatient method created above. \n        this.addPatient(newPatient);\n        e.preventDefault();\n    }\n\n    render() {\n        return (\n            <div>\n                <br />\n                <Link className=\"btn grey\" to=\"/patients\">Back</Link>\n                <h1>Add Patient</h1>\n                <form className=\"col s12\" onSubmit={this.onSubmit.bind(this)}>\n                    <div className=\"row\">\n                        <div className=\"input-field col s6\">\n                            <input name=\"pt_name\" ref=\"pt_name\" placeholder=\"John Doe\" id=\"pt_name\" type=\"text\" className=\"validate\" />\n                            <label style={{ color: \"black\", fontWeight: 'bold' }} className=\"active\" htmlFor=\"pt_name\">Name</label>\n                        </div>\n                        <div className=\"input-field col s6\">\n                            <input name=\"pt_email\" ref=\"pt_email\" placeholder=\"john.doe@test.com\" id=\"pt_email\" type=\"text\" className=\"validate\" />\n                            <label style={{ color: \"black\", fontWeight: 'bold' }} className=\"active\" htmlFor=\"pt_email\">Email</label>\n                        </div>\n                    </div>\n\n                    <div className=\"row\">\n                        <div className=\"input-field col s6\">\n                            <input name=\"pt_cell\" ref=\"pt_cell\" placeholder=\"346-252-3365\" id=\"pt_cell\" type=\"text\" className=\"validate\" />\n                            <label style={{ color: \"black\", fontWeight: 'bold' }} className=\"active\" htmlFor=\"pt_cell\">Cell</label>\n                            <span className=\"helper-text\">Cell number must be in XXX-XXX-XXXX format</span>\n                        </div>\n                        <div className=\"input-field col s6\">\n                            <input name=\"pt_gender\" ref=\"pt_gender\" placeholder=\"Male\" id=\"pt_gender\" type=\"text\" className=\"validate\" />\n                            <label style={{ color: \"black\", fontWeight: 'bold' }} className=\"active\" htmlFor=\"pt_gender\">Gender</label>\n                        </div>\n                    </div>\n\n                    <div className=\"row\">\n                        <div className=\"input-field col s6\">\n                            <input name=\"pt_dob\" ref=\"pt_dob\" placeholder=\"1994-01-01\" id=\"pt_dob\" type=\"text\" className=\"validate\" />\n                            <label style={{ color: \"black\", fontWeight: 'bold' }} className=\"active\" htmlFor=\"pt_dob\">Date of Birth</label>\n                            <span className=\"helper-text\">Date must be in YYYY-MM-DD format</span>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <button className=\"btn waves-effect waves-light\" type=\"submit\" value=\"Save\" name=\"action\">Add Patient</button>\n                    </div>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default AddPatient;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\n\nclass EditPatient extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            pt_name: '',\n            pt_email: '',\n            pt_cell: '',\n            pt_gender: '',\n            pt_dob: '',\n            id: ''\n        }\n\n        // Bind \"this\" to the handleInputChange method\n        this.handleInputChange = this.handleInputChange.bind(this);\n    }\n\n    componentWillMount(){\n        this.getPatientDetails();\n    }\n\n    // Create a new method getPatientDetails to make an axios request to retrieve details of just ONE patient by pt_uuid\n    getPatientDetails() {\n        let id = this.props.match.params.id;\n        axios.get(`http://localhost:3000/api/patients/${id}`)\n            .then(response => {\n                // Set state to the response that was fetched\n                this.setState({\n                    pt_name: response.data.pt_name,\n                    pt_email: response.data.pt_email,\n                    pt_cell: response.data.pt_cell,\n                    pt_gender: response.data.pt_gender,\n                    pt_dob: response.data.pt_dob\n                }, () => {\n                    console.log(this.state)\n                });\n            })\n            .catch(err => console.log(err))\n    }    \n\n    editPatient(newPatient){\n        //console.log(newPatient)\n        // Making a PUT request thru axios\n        axios.request({\n            method: 'PUT',\n            url: `http://localhost:3000/api/patients/${this.state.id}`,\n            data: newPatient\n        }).then(response => {\n            // Redirecting to patients page\n            this.props.history.push('/patients');\n        }).catch(err => console.log(err));        \n    }\n\n    // Creating an onSubmit method that takes in \"e\" or event which is the input from the form and stores it in newPatient object. \n    onSubmit(e){\n        //console.log(this.refs.name.value);\n        // Making sure to create an array of object [{}] since this is the format the API accepts UPDATE requests\n        const newPatient = [{\n            pt_name: this.refs.pt_name.value,\n            pt_email: this.refs.pt_email.value,\n            pt_cell:  this.refs.pt_cell.value,\n            pt_gender: this.refs.pt_gender.value,\n            pt_dob: this.refs.pt_dob.value \n        }]\n        // Adds the newPatient object using the addPatient method created above. \n        this.editPatient(newPatient);\n        e.preventDefault();\n    }\n\n    handleInputChange(e){\n        const target = e.target;\n        const value = target.value;\n        const name = target.name;\n\n        this.setState({\n            [name]: value\n        })\n    }\n\n    render(){\n        return(\n            <div>\n                <br />\n                <Link className=\"btn grey\" to=\"/patients\">Back</Link>                \n                <h1>Edit Patient</h1>\n                <form className=\"col s12\" onSubmit={this.onSubmit.bind(this)}>        \n                    <div className=\"row\">\n                        <div className=\"input-field col s6\">\n                            <input name=\"pt_name\" ref=\"pt_name\" placeholder=\"John Doe\" id=\"pt_name\" type=\"text\" className=\"validate\" value={this.state.pt_name} onChange={this.handleInputChange} />\n                            <label className=\"active\" htmlFor=\"pt_name\">Name</label>\n                        </div>\n                        <div className=\"input-field col s6\">\n                            <input name=\"pt_email\" ref=\"pt_email\" placeholder=\"john.doe@test.com\" id=\"pt_email\" type=\"text\" className=\"validate\" value={this.state.pt_email} onChange={this.handleInputChange}  />\n                            <label className=\"active\"  htmlFor=\"pt_email\">Email</label>\n                        </div>                        \n                    </div>\n\n                    <div className=\"row\">\n                        <div className=\"input-field col s6\">\n                            <input name=\"pt_cell\" ref=\"pt_cell\" placeholder=\"346-252-3365\" id=\"pt_cell\" type=\"text\" className=\"validate\" value={this.state.pt_cell} onChange={this.handleInputChange}  />\n                            <label className=\"active\"  htmlFor=\"pt_cell\">Cell</label>\n                            <span className=\"helper-text\">Cell number must be in XXX-XXX-XXXX format</span>\n                        </div>\n                        <div className=\"input-field col s6\">\n                            <input name=\"pt_gender\" ref=\"pt_gender\" placeholder=\"Male\" id=\"pt_gender\" type=\"text\" className=\"validate\" value={this.state.pt_gender} onChange={this.handleInputChange}  />\n                            <label className=\"active\"  htmlFor=\"pt_gender\">Gender</label>\n                        </div>\n                    </div>\n\n                    <div className=\"row\">\n                        <div className=\"input-field col s6\">\n                            <input name=\"pt_dob\" ref=\"pt_dob\" placeholder=\"1994-01-01\" id=\"pt_dob\" type=\"text\" className=\"validate\" value={this.state.pt_dob} onChange={this.handleInputChange} />\n                            <label className=\"active\"  htmlFor=\"pt_dob\">Date of Birth</label>\n                            <span className=\"helper-text\">Date must be in YYYY-MM-DD format</span>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <button className=\"btn waves-effect waves-light\" type=\"submit\" value=\"Save\" name=\"action\">Save Patient Details</button> \n                    </div>                                                                                                    \n                </form>\n            </div>\n        )\n    }\n}\n\nexport default EditPatient;","import React, { Component } from 'react';\nimport axios from 'axios';\n\n// Create different components for conditions, drugs. Each ConditionsItem and DrugsItem should have their own axios calls. These components will GET response by id. Once the object from the axios call is received and stored in the state (use map function - watch 16:53 in the video \"MeetupItem\") you will then create a separate Chart component and render ConditionsItem + DrugsItem in the Chart component's render function using keys <ConditionsItem key={}> \n\nclass ConditionItem extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            conditions: []\n        }\n    }\n\n    componentDidMount() {\n        this.getPatientConditions();\n    }\n\n    getPatientConditions() {\n        let id = this.props.match.params.id;\n        axios.get(`http://localhost:3000/api/patients/${id}/conditions`)\n            .then(response => {\n                this.setState({ conditions: response.data }, () => {\n                })              \n        })        \n    }\n\n    render() {\n        return (\n            <div>\n                <h3>Patient Conditions</h3>\n                <table className=\"highlight\">\n                    <thead>\n                        <tr>\n                            <th>ICD-10</th>\n                            <th>Condition Name</th>\n                        </tr>\n                    </thead>\n                        <tbody>\n                            {this.state.conditions.map((condition, i) => {\n                                return (\n                                    <tr key={i}>\n                                        <td>{condition.icd_10}</td>\n                                        <td>{condition.condition_name}</td>\n                                    </tr>\n                                )\n                            })}\n                        </tbody>\n                </table>\n            </div>\n        )\n    }\n}\n\nexport default ConditionItem;","import React, { Component } from 'react';\nimport axios from 'axios';\n\n// Create different components for conditions, drugs. Each ConditionsItem and DrugsItem should have their own axios calls. These components will GET response by id. Once the object from the axios call is received and stored in the state (use map function - watch 16:53 in the video \"MeetupItem\") you will then create a separate Chart component and render ConditionsItem + DrugsItem in the Chart component's render function using keys <ConditionsItem key={}> \n\nclass DrugItem extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            drugs: []\n        }\n    }\n\n    componentDidMount() {\n        this.getPatientDrugs();\n    }\n\n    getPatientDrugs() {\n        let id = this.props.match.params.id;\n        axios.get(`http://localhost:3000/api/patients/${id}/drugs`)\n            .then(response => {\n                this.setState({ drugs: response.data }, () => {})              \n        })        \n    }\n\n    render() {\n        return (\n            <div>\n                <h3>Drugs</h3>\n                <table className=\"highlight\">\n                    <thead>\n                        <tr>\n                            <th>Drug Name</th>\n                        </tr>\n                    </thead>\n                            <tbody>\n                                {this.state.drugs.map((drug, i) => {\n                                    return (\n                                        <tr key={i}>\n                                            <td>{drug.drug_name}</td>\n                                        </tr>\n                                    )\n                                })}\n                            </tbody>\n                </table>\n            </div>\n        )\n    }\n}\n\nexport default DrugItem;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\n\nclass AddPatientDrug extends Component {\n    // Creating an addPatient method to take in the newPatient object w/ the form data\n    addPatientDrug(newPatientDrug) {\n        let id = this.props.match.params.id;\n        console.log(id)\n        // Making a POST request thru axios\n        axios.request({\n            method: 'POST',\n            url: `http://localhost:3000/api/patients/${id}/drugs`,\n            data: newPatientDrug\n        }).then(response => {\n            // Redirecting to patients page\n            this.props.history.push(`/patients/${id}/drugs`);\n        }).catch(err => console.log(err));\n    };\n\n    // Creating an onSubmit method that takes in \"e\" or event which is the input from the form and stores it in newPatient object. \n    onSubmit(e) {\n        //console.log(this.refs.name.value);\n        // Making sure to create an array of object [{}] since this is the format the API accepts POST requests\n        const newPatientDrug = [{\n            drug_name: this.refs.drug_name.value,\n            patientId: this.refs.patientId.value\n        }]\n        // Adds the newPatient object using the addPatient method created above. \n        this.addPatientDrug(newPatientDrug);\n        e.preventDefault();\n    }\n\n    render() {\n        return (\n            <div>\n                <br />\n                <Link className=\"btn grey\" to=\"/patients\">Back</Link>\n                <h1>Add Drugs for Patient</h1>\n                <form className=\"col s12\" onSubmit={this.onSubmit.bind(this)}>\n                    <div className=\"row\">\n                        <div className=\"input-field col s6\">\n                            <input name=\"drug_name\" ref=\"drug_name\" placeholder=\"Hydrocodone\" id=\"drug_name\" type=\"text\" className=\"validate\" />\n                            <label style={{ color: \"black\", fontWeight: 'bold' }} className=\"active\" htmlFor=\"drug_name\">Drug Name</label>\n                        </div>\n                        <div className=\"input-field col s6\">\n                            <input name=\"patientId\" ref=\"patientId\" placeholder=\"1\" id=\"patientId\" type=\"text\" className=\"validate\" />\n                            <label style={{ color: \"black\", fontWeight: 'bold' }} className=\"active\" htmlFor=\"patientId\">Patient ID</label>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <button className=\"btn waves-effect waves-light\" type=\"submit\" value=\"Save\" name=\"action\">Add Patient Drug</button>\n                    </div>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default AddPatientDrug;","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Patients from '../Patients/Patients';\nimport Home from './Home/Home';\nimport PatientDetails from '../Patients/PatientDetails';\nimport AddPatient from '../Patients/AddPatients';\nimport EditPatient from '../Patients/EditPatient';\nimport ConditionItem from '../Conditions/ConditionItem';\nimport DrugItem from '../Drugs/DrugItem'; \nimport AddPatientDrug from '../Drugs/AddPatientDrug';\n// import AddPatientCondition from '../Conditions/AddPatientCondition';\n\nconst Main = () => (\n    <main>\n        <Switch>\n            <Route exact path='/' component={Home} />\n            <Route exact path='/patients' component={Patients} />\n            {/* Any other pages you create, add a new Route tag and link that component by importing it up top and then adding it here */}\n            <Route exact path='/patients/add' component={AddPatient} />\n            <Route exact path='/patients/edit/:id' component={EditPatient} />\n            <Route exact path='/patients/:id' component={PatientDetails} />\n            <Route exact path='/patients/:id/drugs/add' component={AddPatientDrug} />\n            {/* <Route exact path='/patients/:id/conditions/add' component={AddPatientCondition} /> */}\n            <Route exact path='/patients/:id/conditions' component={ConditionItem} />\n            <Route exact path='/patients/:id/drugs' component={DrugItem} />\n        </Switch>\n    </main>\n)\n\nexport default Main;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport \"./Navbar.css\";\nclass Navbar extends Component {\n    render() {\n        return (\n            <div>\n                <nav className=\"blue lighter-3\">\n                    <div className=\"nav-wrapper\">\n                        <a href=\"/\" className=\"brand-logo center\">electroScribe</a>\n                        <a data-target=\"main-menu\" className=\"sidenav-trigger show-on-large\">\n                            <i className=\"fa fa-bars\"></i></a>\n\n\n                    </div>\n                </nav>\n                <div>\n                    <ul className=\"sidenav\" id=\"main-menu\">\n                        <li><Link to=\"/\"><i className=\"fa fa-home\"></i> electroScribe</Link></li>\n                        <br />\n\n\n                        <li className=\"sideLinks\"><Link to=\"/dashboard\"><i className=\"fa fa-h-square\"></i> Dashboard</Link></li>\n                        <li className=\"sideLinks\"><Link to=\"/patients/\"><i className=\"fa fa-users\"></i> Patients</Link></li>\n                        <li className=\"sideLinks\"><Link to=\"/chart\"><i className=\"fa fa-heartbeat\"></i>Medical Records</Link></li>\n                    </ul>\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default Navbar;","import React from 'react';\nimport './App.css';\nimport Main from './components/Pages/Main';\nimport Navbar from './components/Navbar/Navbar';\n\nconst App = () => (\n  <div>\n    <Navbar />\n    <div className=\"container\">\n      <Main />\n    </div>\n  </div>\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}